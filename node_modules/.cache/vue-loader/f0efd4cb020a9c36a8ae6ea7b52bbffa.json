{"remainingRequest":"/home/garnnet/Crone-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/garnnet/Crone-master/node_modules/mdbvue/src/components/Layout/Masonry.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/garnnet/Crone-master/node_modules/mdbvue/src/components/Layout/Masonry.vue","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmNvbnN0IE1hc29ucnkgPSB7CiAgcHJvcHM6IHsKICAgIHRhZzogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdkaXYnCiAgICB9LAogICAgaG9yaXpvbnRhbDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHJlc3BvbnNpdmU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBmbGV4Ym94OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgbWF4SGVpZ2h0OiB7CiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sCiAgICAgIGRlZmF1bHQ6ICdhdXRvJwogICAgfSwKICAgIG51bUNvbHM6IHsKICAgICAgdHlwZTogTnVtYmVyCiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaGVpZ2h0OiBudWxsCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIG1hc29ucnlDbGFzcygpIHsKICAgICAgcmV0dXJuIFsKICAgICAgICB0aGlzLmhvcml6b250YWwgfHwgdGhpcy5mbGV4Ym94ID8gdGhpcy5mbGV4Ym94ID8gJ21hc29ucnktd2l0aC1mbGV4JyA6ICdtYXNvbnJ5LWhvcml6b250YWwnIDogJ21hc29ucnktd2l0aC1jb2x1bW5zJwogICAgICBdOwogICAgfSwKICAgIG1hc29ucnlTdHlsZSgpIHsgCiAgICAgIHJldHVybiB7CiAgICAgICAgbWF4SGVpZ2h0OiB0aGlzLmhlaWdodCA/IGlzTmFOKHRoaXMuaGVpZ2h0KSA/IHRoaXMuaGVpZ2h0IDogYCR7dGhpcy5oZWlnaHR9cHhgIDogbnVsbAogICAgICB9OwogICAgfSwKICB9LAogIG1ldGhvZHM6IHsKICAgIGNoZWNrU2NyZWVuU2l6ZSgpIHsKICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNjAwKSB7CiAgICAgICAgdGhpcy5oZWlnaHQgPSBudWxsOwogICAgICB9CiAgICAgIGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgMTIwMCkgewogICAgICAgIGNvbnN0IGRpbWVudGlvbnMgPSB0aGlzLiRzbG90cy5kZWZhdWx0LmZpbHRlcihlbCA9PiBlbC50YWcpLm1hcChpbWcgPT4gaW1nLmVsbS5jbGllbnRXaWR0aCk7CiAgICAgICAgY29uc3QgY2VudGVyID0gTWF0aC5mbG9vcihkaW1lbnRpb25zLmxlbmd0aC8yKTsKICAgICAgICBjb25zdCBmaXJzdENvbCA9IGRpbWVudGlvbnMuc2xpY2UoMCwgY2VudGVyKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKTsKICAgICAgICBjb25zdCBzZWNDb2wgPSBkaW1lbnRpb25zLnNsaWNlKGNlbnRlcikucmVkdWNlKChhLCBiKSA9PiBhICsgYik7CgogICAgICAgIHRoaXMuaGVpZ2h0ID0gZmlyc3RDb2wgPiBzZWNDb2wgPyBmaXJzdENvbCA6IHNlY0NvbDsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0OwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgaWYgKHRoaXMucmVzcG9uc2l2ZSkgewogICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tTY3JlZW5TaXplLCAyMDApOwogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdGhpcy5jaGVja1NjcmVlblNpemUpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDsKICAgIH0KICAgIAogICAgaWYgKCF0aGlzLmhvcml6b250YWwgJiYgIXRoaXMuZmxleGJveCkgewogICAgICBjb25zdCBjb2xIZWlnaHRzID0gQXJyYXkodGhpcy5udW1Db2xzKS5maWxsKDApOwogICAgICBjb25zdCBtYXNvbnJ5V3JhcHBlciA9IHRoaXMuJHJlZnMubWFzb25yeTsKICAgICAgQXJyYXkuZnJvbShtYXNvbnJ5V3JhcHBlci5jaGlsZHJlbikuZm9yRWFjaCgoY2hpbGQsIGkpID0+IHsKICAgICAgICBjb25zdCBvcmRlciA9IGkgJSB0aGlzLm51bUNvbHM7CiAgICAgICAgY2hpbGQuc3R5bGUub3JkZXIgPSBvcmRlcjsKICAgICAgICBjb2xIZWlnaHRzW29yZGVyXSArPSBwYXJzZUZsb2F0KGNoaWxkLmNsaWVudEhlaWdodCk7CiAgICAgIH0pOwogICAgICBtYXNvbnJ5V3JhcHBlci5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heCguLi5jb2xIZWlnaHRzKSArICdweCc7CiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95KCkgewogICAgaWYgKHRoaXMucmVzcG9uc2l2ZSkgewogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgdGhpcy5jaGVja1NjcmVlblNpemUpOwogICAgfQogIH0KfTsKCmV4cG9ydCBkZWZhdWx0IE1hc29ucnk7CmV4cG9ydCB7IE1hc29ucnkgYXMgbWRiTWFzb25yeSB9Owo="},{"version":3,"sources":["Masonry.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Masonry.vue","sourceRoot":"node_modules/mdbvue/src/components/Layout","sourcesContent":["<template>\n  <component :is=\"tag\" :class=\"masonryClass\" :style=\"masonryStyle\" ref=\"masonry\">\n    <slot></slot>\n  </component>\n</template>\n\n<script>\nconst Masonry = {\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    horizontal: {\n      type: Boolean,\n      default: false\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    flexbox: {\n      type: Boolean,\n      default: false\n    },\n    maxHeight: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    numCols: {\n      type: Number\n    }\n  },\n  data() {\n    return {\n      height: null\n    };\n  },\n  computed: {\n    masonryClass() {\n      return [\n        this.horizontal || this.flexbox ? this.flexbox ? 'masonry-with-flex' : 'masonry-horizontal' : 'masonry-with-columns'\n      ];\n    },\n    masonryStyle() { \n      return {\n        maxHeight: this.height ? isNaN(this.height) ? this.height : `${this.height}px` : null\n      };\n    },\n  },\n  methods: {\n    checkScreenSize() {\n      if (window.innerWidth < 600) {\n        this.height = null;\n      }\n      else if (window.innerWidth < 1200) {\n        const dimentions = this.$slots.default.filter(el => el.tag).map(img => img.elm.clientWidth);\n        const center = Math.floor(dimentions.length/2);\n        const firstCol = dimentions.slice(0, center).reduce((a, b) => a + b);\n        const secCol = dimentions.slice(center).reduce((a, b) => a + b);\n\n        this.height = firstCol > secCol ? firstCol : secCol;\n      }\n      else {\n        this.height = this.maxHeight;\n      }\n    }\n  },\n  mounted() {\n    if (this.responsive) {\n      setTimeout(this.checkScreenSize, 200);\n      window.addEventListener(\"resize\", this.checkScreenSize);\n    } else {\n      this.height = this.maxHeight;\n    }\n    \n    if (!this.horizontal && !this.flexbox) {\n      const colHeights = Array(this.numCols).fill(0);\n      const masonryWrapper = this.$refs.masonry;\n      Array.from(masonryWrapper.children).forEach((child, i) => {\n        const order = i % this.numCols;\n        child.style.order = order;\n        colHeights[order] += parseFloat(child.clientHeight);\n      });\n      masonryWrapper.style.height = Math.max(...colHeights) + 'px';\n    }\n  },\n  beforeDestroy() {\n    if (this.responsive) {\n      window.removeEventListener(\"resize\", this.checkScreenSize);\n    }\n  }\n};\n\nexport default Masonry;\nexport { Masonry as mdbMasonry };\n</script>\n\n<style scoped>\n.masonry-with-columns, .masonry-with-flex {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n.masonry-horizontal {\n  display: flex;\n  flex-wrap: wrap; }\n.masonry-horizontal div {\n  flex: 1 0 auto; }\n</style>\n"]}]}