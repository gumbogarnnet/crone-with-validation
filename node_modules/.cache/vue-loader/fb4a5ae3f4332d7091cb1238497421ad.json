{"remainingRequest":"/home/garnnet/Crone-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/garnnet/Crone-master/src/views/Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/garnnet/Crone-master/src/views/Register.vue","mtime":1572967500321},{"path":"/home/garnnet/Crone-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHJlcXVpcmVkLCBtaW5MZW5ndGgsIGJldHdlZW4gfSBmcm9tICd2dWVsaWRhdGUvbGliL3ZhbGlkYXRvcnMnIDsKaW1wb3J0IHsgbWRiSW5wdXQsIG1kYkJ0biB9IGZyb20gJ21kYnZ1ZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQmFzaWMnLAogIGRhdGEoKXsKICAgIHJldHVybnsKICAgIGVycm9yOiBudWxsICwKICAgIHRhc2tUaW1lOiAiIiwKICAgIHRhc2tEZXNjOiIiLAogICAgdGFza1R5cGU6IiIsCiAgICBjbWQ6IiIsCiAgICBhY3RpdmU6IGZhbHNlLAogICAgc3VibWl0U3RhdHVzOiBudWxsCiAgICAKICAgIH0KICAgICAKICB9LAogIHZhbGlkYXRpb25zOiB7CiAgICB0YXNrRGVzYzogewogICAgICByZXF1aXJlZCwKICAgICAgCiAgICB9LAogICAgdGFza1RpbWU6IHsKICAgICAgcmVxdWlyZWQsCiAgICAgICBtaW5MZW5ndGg6IG1pbkxlbmd0aCg2KQogICAgICAKICAgIH0sCiAgICAgdGFza1R5cGUgOiB7CiAgICAgIHJlcXVpcmVkLAogICAgICAgCiAgICAgIAogICAgfSwKICAgICBjbWQgOiB7CiAgICAgIHJlcXVpcmVkLAogICAgICAKICAgICAgCiAgICB9CiAgfSwKICAgcHJvcHM6IFsnbWVzc2FnZSddLAogIGNvbXBvbmVudHM6IHsKICAgIG1kYklucHV0LAogICAgbWRiQnRuCiAgfSwKICBtZXRob2RzOnsKCiAgICAKCiAgY3JlYXRldGFzaygpewogIGNvbnNvbGUubG9nKCdjcmVhdGUgdGFzayAnKSAKICB0aGlzLiR2LiR0b3VjaCgpCiAgaWYgKHRoaXMuJHYuJGludmFsaWQpIHsKICAgICAgdGhpcy5zdWJtaXRTdGF0dXMgPSAnRVJST1InCiAgICB9IAogICAgZWxzZSB7CiAgICAgIAogICAgICAKCiAgYXhpb3MucG9zdCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2NyZWF0ZVRhc2snLCB7CiAgCiAgCiAgdGFza0Rlc2M6dGhpcy50YXNrRGVzYywKICB0YXNrVHlwZTp0aGlzLnRhc2tUeXBlLAogIGNtZDp0aGlzLmNtZCwKICBhY3RpdmU6IHRydWUsCiAgdGFza1RpbWU6IHRoaXMudGFza1RpbWUgLAoKCgogICAgICB9KQoKCgogIHRoaXMuc3VibWl0U3RhdHVzID0gJ1BFTkRJTkcnCiAgc2V0VGltZW91dCgoKSA9PiB7CiAgdGhpcy4kcm91dGVyLnB1c2goJy8nKS4KICB0aGlzLnN1Ym1pdFN0YXR1cyA9ICdPSycKICB9LCA1MDApCiAgICB9CiAgCgoKICAgfQogIH0sCgogCiAgCn0KCg=="},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;;;AAIA","file":"Register.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <!-- Material form register -->\n  <div class=\"col-6 center\">\n    \n  <form class=\"login\"  @submit.prevent=\"createtask()\"  :class=\"{ 'form-group--error': $v.taskDesc.$error }\">\n\n      <div class=\"row d-flex justify-content-center mt-2\">\n    <i class=\"fas fa-book fa-10x\"></i>\n    </div>\n      \n    <p class=\"h4 text-center mb-4\">Add your Task here</p>\n    <div class=\"grey-text\">\n     \n      <mdb-input class=\"form__input\" label=\"Task Description\" icon=\"user\" type=\"text\" v-model.trim=\"$v.taskDesc.$model\" />\n     <div class=\"typo__p\" v-if=\"submitStatus === 'ERROR'\"> <p class=\"error text-danger\" v-if=\"!$v.taskDesc.required\">*Field is required</p> </div>\n      <mdb-input class=\"form__input\" label=\"Task Time\"  icon=\"envelope\" type=\"text\" v-model.trim=\"$v.taskTime.$model\"/>\n      <div class=\"typo__p\" v-if=\"submitStatus === 'ERROR'\"><p class=\"error text-danger\" v-if=\"!$v.taskTime.required\">*Field is required</p></div>\n      <div class=\"error text-danger\" v-if=\"!$v.taskTime.minLength\">The crone expression must be atlist 6 characters eg(* * * * * *)  {{$v.taskTime.$params.minLength.min}} </div>\n      <mdb-input class=\"form__input\" label=\"Task type\" icon=\"exclamation-triangle\" type=\"text\" v-model.trim=\"$v.taskType.$model\"/>\n      <div class=\"typo__p\" v-if=\"submitStatus === 'ERROR'\"><p class=\"error text-danger\" v-if=\"!$v.taskType.required\">*Field is required</p></div>\n      <mdb-input class=\"form__input\" label=\"Command to execute\" icon=\"exclamation-triangle\" type=\"text\" v-model.trim=\"$v.cmd.$model\"/>\n      <div class=\"error text-danger\" v-if=\"!$v.cmd.required\">*Field is required</div>\n    </div>\n    <div class=\"text-center\">\n      <mdb-btn color=\"primary\" >Add</mdb-btn>\n    </div>\n    <p class=\"typo__p\" v-if=\"submitStatus === 'OK'\">Thanks for your submission!</p>\n    <p class=\"typo__p\" v-if=\"submitStatus === 'ERROR'\">Please fill the form correctly.</p>\n    <p class=\"typo__p\" v-if=\"submitStatus === 'PENDING'\">Sending...</p>\n  </form>\n  \n  </div>\n  <!-- Material form register -->\n</template>\n<script>\n  import { required, minLength, between } from 'vuelidate/lib/validators' ;\n  import { mdbInput, mdbBtn } from 'mdbvue';\n  export default {\n    name: 'Basic',\n    data(){\n      return{\n      error: null ,\n      taskTime: \"\",\n      taskDesc:\"\",\n      taskType:\"\",\n      cmd:\"\",\n      active: false,\n      submitStatus: null\n      \n      }\n       \n    },\n    validations: {\n      taskDesc: {\n        required,\n        \n      },\n      taskTime: {\n        required,\n         minLength: minLength(6)\n        \n      },\n       taskType : {\n        required,\n         \n        \n      },\n       cmd : {\n        required,\n        \n        \n      }\n    },\n     props: ['message'],\n    components: {\n      mdbInput,\n      mdbBtn\n    },\n    methods:{\n\n      \n\n    createtask(){\n    console.log('create task ') \n    this.$v.$touch()\n    if (this.$v.$invalid) {\n        this.submitStatus = 'ERROR'\n      } \n      else {\n        \n        \n\n    axios.post('http://localhost:8080/createTask', {\n    \n    \n    taskDesc:this.taskDesc,\n    taskType:this.taskType,\n    cmd:this.cmd,\n    active: true,\n    taskTime: this.taskTime ,\n\n\n\n        })\n\n\n\n    this.submitStatus = 'PENDING'\n    setTimeout(() => {\n    this.$router.push('/').\n    this.submitStatus = 'OK'\n    }, 500)\n      }\n    \n  \n\n     }\n    },\n\n   \n    \n  }\n\n</script>\n\n<style scoped>\n.center {\n  margin: auto;\n}\n</style>"]}]}