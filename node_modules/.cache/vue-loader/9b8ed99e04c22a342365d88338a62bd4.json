{"remainingRequest":"/home/garnnet/Crone-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/garnnet/Crone-master/node_modules/mdbvue/src/components/Advanced/ToastNotification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/garnnet/Crone-master/node_modules/mdbvue/src/components/Advanced/ToastNotification.vue","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/garnnet/Crone-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBtZGJCdG4gZnJvbSAnLi4vQ29tcG9uZW50cy9CdXR0b24nOwppbXBvcnQgbWRiSWNvbiBmcm9tICcuLi9Db250ZW50L0ZhJzsKY29uc3QgVG9hc3ROb3RpZmljYXRpb24gPSB7CiAgbmFtZTogJ05vdGlmaWNhdGlvbicsCiAgY29tcG9uZW50czogewogICAgbWRiQnRuLAogICAgbWRiSWNvbgogIH0sCiAgcHJvcHM6IHsKICAgIHRpbWU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIHNob3c6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBtZXNzYWdlOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICB0aXRsZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9LAogICAgaWNvbjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICJzcXVhcmUiCiAgICB9LAogICAgaWNvblNpemU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnbGcnCiAgICB9LAogICAgaWNvbkNvbG9yOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJ3ByaW1hcnknCiAgICB9LAogICAgcmVjZWl2ZWQ6IERhdGUKICB9LAogIGRhdGEoKXsKICAgIHJldHVybiB7CiAgICAgIGN1cnJlbnRUaW1lOiAnJywKICAgICAgc3RhcnRUaW1lOiAnJywKICAgICAgc2hvd05vdGlmaWNhdGlvbjogdGhpcy5zaG93LAogICAgICBpbnRlcnZhbDogbnVsbAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBzaG93aW5nOiB7CiAgICAgIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5zaG93Tm90aWZpY2F0aW9uOwogICAgICB9LAogICAgICBzZXQobmV3VmFsKSB7CiAgICAgICAgdGhpcy5zaG93Tm90aWZpY2F0aW9uID0gbmV3VmFsOwogICAgICB9CiAgICB9LAogICAgY2FsY3VsYXRlZFRpbWUoKXsKICAgICAgbGV0IHRpbWUgPSAodGhpcy5jdXJyZW50VGltZSAtIHRoaXMuc3RhcnRUaW1lKS8xMDAwOwogICAgICByZXR1cm4gdGhpcy5mb3JtYXRUaW1lKHRpbWUpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgdXBkYXRlVGltZSgpewogICAgICB0aGlzLmN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICB9LAogICAgZm9ybWF0VGltZSh0aW1lKXsKICAgICAgc3dpdGNoICh0cnVlKSB7CiAgICAgICAgY2FzZSB0aW1lIDwgNjA6CiAgICAgICAgICByZXR1cm4gYG5vd2A7CiAgICAgICAgY2FzZSB0aW1lIDwgMzYwMDoKICAgICAgICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcih0aW1lIC8gNjApOwogICAgICAgICAgcmV0dXJuIGAke21pbnV0ZXN9IG1pbiBhZ29gOwogICAgICAgIGNhc2UgdGltZSA+PSAzNjAwICYmIHRpbWUgPCA4NjQwMDoKICAgICAgICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IodGltZSAvIDM2MDApOwogICAgICAgICAgcmV0dXJuIGAke2hvdXJzfSBoIGFnb2A7CiAgICAgICAgY2FzZSB0aW1lID49IDg2NDAwOgogICAgICAgICAgbGV0IGRheXMgPSBNYXRoLmZsb29yKHRpbWUgLyA4NjQwMCk7CiAgICAgICAgICByZXR1cm4gYCR7ZGF5c30gZCBhZ29gOwogICAgICB9CiAgICB9LAogICAgY2xvc2VUb2FzdCgpewogICAgICB0aGlzLnNob3dpbmcgPSBmYWxzZTsKICAgIH0sCiAgfSwKICBtb3VudGVkKCl7CiAgICBsZXQgdGltZVJlY2VpdmVkID0gdGhpcy5yZWNlaXZlZCB8fCBuZXcgRGF0ZSgpOwogICAgdGhpcy5zdGFydFRpbWUgPSB0aW1lUmVjZWl2ZWQuZ2V0VGltZSgpOwogICAgdGhpcy5jdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgdGhpcy5pbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLnVwZGF0ZVRpbWUsIDYwMDAwKTsKICB9LAogIGJlZm9yZURlc3Ryb3koKXsKICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpOwogIH0KfTsKCmV4cG9ydCBkZWZhdWx0IFRvYXN0Tm90aWZpY2F0aW9uOwpleHBvcnQgeyBUb2FzdE5vdGlmaWNhdGlvbiBhcyBtZGJUb2FzdE5vdGlmaWNhdGlvbiB9Owo="},{"version":3,"sources":["ToastNotification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"ToastNotification.vue","sourceRoot":"node_modules/mdbvue/src/components/Advanced","sourcesContent":["<template>\n  <transition enter-active-class=\"animated fadeIn\" leave-active-class=\"animated \">\n    <div v-if=\"showing\" class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n      <div class=\"toast-header\">\n        <mdb-icon class=\"mr-2\" :icon=\"icon\" :color=\"iconColor\" :size=\"iconSize\"></mdb-icon>\n        <strong class=\"mr-auto\">{{title}}</strong>\n        <small v-if=\"time\" class=\"text-muted\">{{calculatedTime}}</small>\n        <button type=\"button\" class=\"ml-2 mb-1 close\" data-dismiss=\"toast\" aria-label=\"Close\" @click=\"closeToast\"><mdb-icon size=\"xs\" icon=\"times\"/></button>\n      </div>\n      <div class=\"toast-body\">\n        {{message}}\n      </div>\n    </div>\n  </transition>\n</template>\n\n\n<script>\nimport mdbBtn from '../Components/Button';\nimport mdbIcon from '../Content/Fa';\nconst ToastNotification = {\n  name: 'Notification',\n  components: {\n    mdbBtn,\n    mdbIcon\n  },\n  props: {\n    time: {\n      type: Boolean,\n      default: true\n    },\n    show: {\n      type: Boolean,\n      default: false\n    },\n    message: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    icon: {\n      type: String,\n      default: \"square\"\n    },\n    iconSize: {\n      type: String,\n      default: 'lg'\n    },\n    iconColor: {\n      type: String,\n      default: 'primary'\n    },\n    received: Date\n  },\n  data(){\n    return {\n      currentTime: '',\n      startTime: '',\n      showNotification: this.show,\n      interval: null\n    };\n  },\n  computed: {\n    showing: {\n      get() {\n        return this.showNotification;\n      },\n      set(newVal) {\n        this.showNotification = newVal;\n      }\n    },\n    calculatedTime(){\n      let time = (this.currentTime - this.startTime)/1000;\n      return this.formatTime(time);\n    }\n  },\n  methods: {\n    updateTime(){\n      this.currentTime = new Date().getTime();\n    },\n    formatTime(time){\n      switch (true) {\n        case time < 60:\n          return `now`;\n        case time < 3600:\n          let minutes = Math.floor(time / 60);\n          return `${minutes} min ago`;\n        case time >= 3600 && time < 86400:\n          let hours = Math.floor(time / 3600);\n          return `${hours} h ago`;\n        case time >= 86400:\n          let days = Math.floor(time / 86400);\n          return `${days} d ago`;\n      }\n    },\n    closeToast(){\n      this.showing = false;\n    },\n  },\n  mounted(){\n    let timeReceived = this.received || new Date();\n    this.startTime = timeReceived.getTime();\n    this.currentTime = new Date().getTime();\n    this.interval = window.setInterval(this.updateTime, 60000);\n  },\n  beforeDestroy(){\n    window.clearInterval(this.interval);\n  }\n};\n\nexport default ToastNotification;\nexport { ToastNotification as mdbToastNotification };\n</script>\n<style scoped>\n  .toast {\n    opacity: 1;\n  }\n  .text-muted {\n    padding-left: 10px;\n  }\n</style>\n"]}]}